<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="902" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="885.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="885.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.68%)</title><rect x="0.0000%" y="821" width="0.6780%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.68%)</title><rect x="0.0000%" y="805" width="0.6780%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.68%)</title><rect x="0.0000%" y="789" width="0.6780%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="799.50"></text></g><g><title>[[heap]] (7 samples, 2.37%)</title><rect x="0.6780%" y="821" width="2.3729%" height="15" fill="rgb(248,212,6)"/><text x="0.9280%" y="831.50">[[..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (7 samples, 2.37%)</title><rect x="0.6780%" y="805" width="2.3729%" height="15" fill="rgb(208,68,35)"/><text x="0.9280%" y="815.50">ha..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 2.03%)</title><rect x="3.0508%" y="805" width="2.0339%" height="15" fill="rgb(232,128,0)"/><text x="3.3008%" y="815.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.68%)</title><rect x="4.4068%" y="789" width="0.6780%" height="15" fill="rgb(207,160,47)"/><text x="4.6568%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::fold (2 samples, 0.68%)</title><rect x="4.4068%" y="773" width="0.6780%" height="15" fill="rgb(228,23,34)"/><text x="4.6568%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.68%)</title><rect x="4.4068%" y="757" width="0.6780%" height="15" fill="rgb(218,30,26)"/><text x="4.6568%" y="767.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (2 samples, 0.68%)</title><rect x="4.4068%" y="741" width="0.6780%" height="15" fill="rgb(220,122,19)"/><text x="4.6568%" y="751.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (2 samples, 0.68%)</title><rect x="4.4068%" y="725" width="0.6780%" height="15" fill="rgb(250,228,42)"/><text x="4.6568%" y="735.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (2 samples, 0.68%)</title><rect x="4.4068%" y="709" width="0.6780%" height="15" fill="rgb(240,193,28)"/><text x="4.6568%" y="719.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 0.68%)</title><rect x="4.4068%" y="693" width="0.6780%" height="15" fill="rgb(216,20,37)"/><text x="4.6568%" y="703.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 0.68%)</title><rect x="4.4068%" y="677" width="0.6780%" height="15" fill="rgb(206,188,39)"/><text x="4.6568%" y="687.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2 samples, 0.68%)</title><rect x="4.4068%" y="661" width="0.6780%" height="15" fill="rgb(217,207,13)"/><text x="4.6568%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::{{closure}} (2 samples, 0.68%)</title><rect x="4.4068%" y="645" width="0.6780%" height="15" fill="rgb(231,73,38)"/><text x="4.6568%" y="655.50"></text></g><g><title>[[stack]] (7 samples, 2.37%)</title><rect x="3.0508%" y="821" width="2.3729%" height="15" fill="rgb(225,20,46)"/><text x="3.3008%" y="831.50">[[..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (1 samples, 0.34%)</title><rect x="5.0847%" y="805" width="0.3390%" height="15" fill="rgb(210,31,41)"/><text x="5.3347%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.34%)</title><rect x="5.0847%" y="789" width="0.3390%" height="15" fill="rgb(221,200,47)"/><text x="5.3347%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (1 samples, 0.34%)</title><rect x="5.0847%" y="773" width="0.3390%" height="15" fill="rgb(226,26,5)"/><text x="5.3347%" y="783.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.34%)</title><rect x="5.0847%" y="757" width="0.3390%" height="15" fill="rgb(249,33,26)"/><text x="5.3347%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (1 samples, 0.34%)</title><rect x="5.0847%" y="741" width="0.3390%" height="15" fill="rgb(235,183,28)"/><text x="5.3347%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 1.02%)</title><rect x="5.4237%" y="805" width="1.0169%" height="15" fill="rgb(221,5,38)"/><text x="5.6737%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 7.12%)</title><rect x="6.4407%" y="805" width="7.1186%" height="15" fill="rgb(247,18,42)"/><text x="6.6907%" y="815.50">&lt;core::ite..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (5 samples, 1.69%)</title><rect x="11.8644%" y="789" width="1.6949%" height="15" fill="rgb(241,131,45)"/><text x="12.1144%" y="799.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (5 samples, 1.69%)</title><rect x="11.8644%" y="773" width="1.6949%" height="15" fill="rgb(249,31,29)"/><text x="12.1144%" y="783.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (5 samples, 1.69%)</title><rect x="11.8644%" y="757" width="1.6949%" height="15" fill="rgb(225,111,53)"/><text x="12.1144%" y="767.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (5 samples, 1.69%)</title><rect x="11.8644%" y="741" width="1.6949%" height="15" fill="rgb(238,160,17)"/><text x="12.1144%" y="751.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (5 samples, 1.69%)</title><rect x="11.8644%" y="725" width="1.6949%" height="15" fill="rgb(214,148,48)"/><text x="12.1144%" y="735.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (5 samples, 1.69%)</title><rect x="11.8644%" y="709" width="1.6949%" height="15" fill="rgb(232,36,49)"/><text x="12.1144%" y="719.50"></text></g><g><title>day18::Grid::gen_next_state::{{closure}} (5 samples, 1.69%)</title><rect x="11.8644%" y="693" width="1.6949%" height="15" fill="rgb(209,103,24)"/><text x="12.1144%" y="703.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (5 samples, 1.69%)</title><rect x="11.8644%" y="677" width="1.6949%" height="15" fill="rgb(229,88,8)"/><text x="12.1144%" y="687.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S&gt;::contains (5 samples, 1.69%)</title><rect x="11.8644%" y="661" width="1.6949%" height="15" fill="rgb(213,181,19)"/><text x="12.1144%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.68%)</title><rect x="13.5593%" y="805" width="0.6780%" height="15" fill="rgb(254,191,54)"/><text x="13.8093%" y="815.50"></text></g><g><title>[unknown] (2 samples, 0.68%)</title><rect x="13.5593%" y="789" width="0.6780%" height="15" fill="rgb(241,83,37)"/><text x="13.8093%" y="799.50"></text></g><g><title>[unknown] (2 samples, 0.68%)</title><rect x="13.5593%" y="773" width="0.6780%" height="15" fill="rgb(233,36,39)"/><text x="13.8093%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.68%)</title><rect x="13.5593%" y="757" width="0.6780%" height="15" fill="rgb(226,3,54)"/><text x="13.8093%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.68%)</title><rect x="13.5593%" y="741" width="0.6780%" height="15" fill="rgb(245,192,40)"/><text x="13.8093%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.68%)</title><rect x="13.5593%" y="725" width="0.6780%" height="15" fill="rgb(238,167,29)"/><text x="13.8093%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="13.8983%" y="709" width="0.3390%" height="15" fill="rgb(232,182,51)"/><text x="14.1483%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="13.8983%" y="693" width="0.3390%" height="15" fill="rgb(231,60,39)"/><text x="14.1483%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="13.8983%" y="677" width="0.3390%" height="15" fill="rgb(208,69,12)"/><text x="14.1483%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="13.8983%" y="661" width="0.3390%" height="15" fill="rgb(235,93,37)"/><text x="14.1483%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="13.8983%" y="645" width="0.3390%" height="15" fill="rgb(213,116,39)"/><text x="14.1483%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="13.8983%" y="629" width="0.3390%" height="15" fill="rgb(222,207,29)"/><text x="14.1483%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="13.8983%" y="613" width="0.3390%" height="15" fill="rgb(206,96,30)"/><text x="14.1483%" y="623.50"></text></g><g><title>day18::game_of_life (2 samples, 0.68%)</title><rect x="14.2373%" y="805" width="0.6780%" height="15" fill="rgb(218,138,4)"/><text x="14.4873%" y="815.50"></text></g><g><title>day18::Grid::gen_next_state (2 samples, 0.68%)</title><rect x="14.2373%" y="789" width="0.6780%" height="15" fill="rgb(250,191,14)"/><text x="14.4873%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.68%)</title><rect x="14.2373%" y="773" width="0.6780%" height="15" fill="rgb(239,60,40)"/><text x="14.4873%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.68%)</title><rect x="14.2373%" y="757" width="0.6780%" height="15" fill="rgb(206,27,48)"/><text x="14.4873%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.68%)</title><rect x="14.2373%" y="741" width="0.6780%" height="15" fill="rgb(225,35,8)"/><text x="14.4873%" y="751.50"></text></g><g><title>[unknown] (29 samples, 9.83%)</title><rect x="5.4237%" y="821" width="9.8305%" height="15" fill="rgb(250,213,24)"/><text x="5.6737%" y="831.50">[unknown]</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (1 samples, 0.34%)</title><rect x="14.9153%" y="805" width="0.3390%" height="15" fill="rgb(247,123,22)"/><text x="15.1653%" y="815.50"></text></g><g><title>day18::Grid::from (1 samples, 0.34%)</title><rect x="15.2542%" y="613" width="0.3390%" height="15" fill="rgb(231,138,38)"/><text x="15.5042%" y="623.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 0.34%)</title><rect x="15.2542%" y="597" width="0.3390%" height="15" fill="rgb(231,145,46)"/><text x="15.5042%" y="607.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S&gt;::insert (1 samples, 0.34%)</title><rect x="15.2542%" y="581" width="0.3390%" height="15" fill="rgb(251,118,11)"/><text x="15.5042%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.34%)</title><rect x="15.2542%" y="565" width="0.3390%" height="15" fill="rgb(217,147,25)"/><text x="15.5042%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 0.34%)</title><rect x="15.2542%" y="549" width="0.3390%" height="15" fill="rgb(247,81,37)"/><text x="15.5042%" y="559.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.34%)</title><rect x="25.4237%" y="421" width="0.3390%" height="15" fill="rgb(209,12,38)"/><text x="25.6737%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1 samples, 0.34%)</title><rect x="25.4237%" y="405" width="0.3390%" height="15" fill="rgb(227,1,9)"/><text x="25.6737%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (5 samples, 1.69%)</title><rect x="38.3051%" y="293" width="1.6949%" height="15" fill="rgb(248,47,43)"/><text x="38.5551%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (7 samples, 2.37%)</title><rect x="45.4237%" y="213" width="2.3729%" height="15" fill="rgb(221,10,30)"/><text x="45.6737%" y="223.50">co..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B)&gt;::ne (7 samples, 2.37%)</title><rect x="45.4237%" y="197" width="2.3729%" height="15" fill="rgb(210,229,1)"/><text x="45.6737%" y="207.50">co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (7 samples, 2.37%)</title><rect x="45.4237%" y="181" width="2.3729%" height="15" fill="rgb(222,148,37)"/><text x="45.6737%" y="191.50">co..</text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (4 samples, 1.36%)</title><rect x="50.8475%" y="53" width="1.3559%" height="15" fill="rgb(234,67,33)"/><text x="51.0975%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (2 samples, 0.68%)</title><rect x="52.2034%" y="53" width="0.6780%" height="15" fill="rgb(247,98,35)"/><text x="52.4534%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (21 samples, 7.12%)</title><rect x="48.1356%" y="133" width="7.1186%" height="15" fill="rgb(247,138,52)"/><text x="48.3856%" y="143.50">hashbrown:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (21 samples, 7.12%)</title><rect x="48.1356%" y="117" width="7.1186%" height="15" fill="rgb(213,79,30)"/><text x="48.3856%" y="127.50">core::hash..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (13 samples, 4.41%)</title><rect x="50.8475%" y="101" width="4.4068%" height="15" fill="rgb(246,177,23)"/><text x="51.0975%" y="111.50">core:..</text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (13 samples, 4.41%)</title><rect x="50.8475%" y="85" width="4.4068%" height="15" fill="rgb(230,62,27)"/><text x="51.0975%" y="95.50">&lt;rust..</text></g><g><title>rustc_hash::FxHasher::add_to_hash (13 samples, 4.41%)</title><rect x="50.8475%" y="69" width="4.4068%" height="15" fill="rgb(216,154,8)"/><text x="51.0975%" y="79.50">rustc..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (7 samples, 2.37%)</title><rect x="52.8814%" y="53" width="2.3729%" height="15" fill="rgb(244,35,45)"/><text x="53.1314%" y="63.50">co..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 1.02%)</title><rect x="60.3390%" y="101" width="1.0169%" height="15" fill="rgb(251,115,12)"/><text x="60.5890%" y="111.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 1.02%)</title><rect x="60.3390%" y="85" width="1.0169%" height="15" fill="rgb(240,54,50)"/><text x="60.5890%" y="95.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (8 samples, 2.71%)</title><rect x="61.3559%" y="101" width="2.7119%" height="15" fill="rgb(233,84,52)"/><text x="61.6059%" y="111.50">ha..</text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 4.75%)</title><rect x="60.0000%" y="117" width="4.7458%" height="15" fill="rgb(207,117,47)"/><text x="60.2500%" y="127.50">&lt;hashb..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2 samples, 0.68%)</title><rect x="64.0678%" y="101" width="0.6780%" height="15" fill="rgb(249,43,39)"/><text x="64.3178%" y="111.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.68%)</title><rect x="64.0678%" y="85" width="0.6780%" height="15" fill="rgb(209,38,44)"/><text x="64.3178%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.68%)</title><rect x="64.0678%" y="69" width="0.6780%" height="15" fill="rgb(236,212,23)"/><text x="64.3178%" y="79.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::{{closure}} (7 samples, 2.37%)</title><rect x="64.7458%" y="117" width="2.3729%" height="15" fill="rgb(242,79,21)"/><text x="64.9958%" y="127.50">ha..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B)&gt;::eq (7 samples, 2.37%)</title><rect x="64.7458%" y="101" width="2.3729%" height="15" fill="rgb(211,96,35)"/><text x="64.9958%" y="111.50">co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (7 samples, 2.37%)</title><rect x="64.7458%" y="85" width="2.3729%" height="15" fill="rgb(253,215,40)"/><text x="64.9958%" y="95.50">co..</text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 3.05%)</title><rect x="67.1186%" y="85" width="3.0508%" height="15" fill="rgb(211,81,21)"/><text x="67.3686%" y="95.50">&lt;ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::ctrl (3 samples, 1.02%)</title><rect x="70.1695%" y="85" width="1.0169%" height="15" fill="rgb(208,190,38)"/><text x="70.4195%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (6 samples, 2.03%)</title><rect x="71.1864%" y="85" width="2.0339%" height="15" fill="rgb(235,213,38)"/><text x="71.4364%" y="95.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 1.69%)</title><rect x="73.2203%" y="85" width="1.6949%" height="15" fill="rgb(237,122,38)"/><text x="73.4703%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 1.69%)</title><rect x="73.2203%" y="69" width="1.6949%" height="15" fill="rgb(244,218,35)"/><text x="73.4703%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 1.69%)</title><rect x="73.2203%" y="53" width="1.6949%" height="15" fill="rgb(240,68,47)"/><text x="73.4703%" y="63.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (111 samples, 37.63%)</title><rect x="40.0000%" y="293" width="37.6271%" height="15" fill="rgb(210,16,53)"/><text x="40.2500%" y="303.50">core::iter::range::&lt;impl core::iter::traits::iterator::Iterat..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (111 samples, 37.63%)</title><rect x="40.0000%" y="277" width="37.6271%" height="15" fill="rgb(235,124,12)"/><text x="40.2500%" y="287.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (111 samples, 37.63%)</title><rect x="40.0000%" y="261" width="37.6271%" height="15" fill="rgb(224,169,11)"/><text x="40.2500%" y="271.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;..</text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (111 samples, 37.63%)</title><rect x="40.0000%" y="245" width="37.6271%" height="15" fill="rgb(250,166,2)"/><text x="40.2500%" y="255.50">core::iter::adapters::filter::filter_fold::{{closure}}</text></g><g><title>day18::Grid::gen_next_state::{{closure}} (108 samples, 36.61%)</title><rect x="41.0169%" y="229" width="36.6102%" height="15" fill="rgb(242,216,29)"/><text x="41.2669%" y="239.50">day18::Grid::gen_next_state::{{closure}}</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (88 samples, 29.83%)</title><rect x="47.7966%" y="213" width="29.8305%" height="15" fill="rgb(230,116,27)"/><text x="48.0466%" y="223.50">std::collections::hash::set::HashSet&lt;T,S&gt;::conta..</text></g><g><title>hashbrown::set::HashSet&lt;T,S&gt;::contains (88 samples, 29.83%)</title><rect x="47.7966%" y="197" width="29.8305%" height="15" fill="rgb(228,99,48)"/><text x="48.0466%" y="207.50">hashbrown::set::HashSet&lt;T,S&gt;::contains</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (87 samples, 29.49%)</title><rect x="48.1356%" y="181" width="29.4915%" height="15" fill="rgb(253,11,6)"/><text x="48.3856%" y="191.50">hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (87 samples, 29.49%)</title><rect x="48.1356%" y="165" width="29.4915%" height="15" fill="rgb(247,143,39)"/><text x="48.3856%" y="175.50">hashbrown::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (87 samples, 29.49%)</title><rect x="48.1356%" y="149" width="29.4915%" height="15" fill="rgb(236,97,10)"/><text x="48.3856%" y="159.50">hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (66 samples, 22.37%)</title><rect x="55.2542%" y="133" width="22.3729%" height="15" fill="rgb(233,208,19)"/><text x="55.5042%" y="143.50">hashbrown::raw::RawTable&lt;T&gt;::find</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (31 samples, 10.51%)</title><rect x="67.1186%" y="117" width="10.5085%" height="15" fill="rgb(216,164,2)"/><text x="67.3686%" y="127.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (31 samples, 10.51%)</title><rect x="67.1186%" y="101" width="10.5085%" height="15" fill="rgb(220,129,5)"/><text x="67.3686%" y="111.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 2.71%)</title><rect x="74.9153%" y="85" width="2.7119%" height="15" fill="rgb(242,17,10)"/><text x="75.1653%" y="95.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (8 samples, 2.71%)</title><rect x="74.9153%" y="69" width="2.7119%" height="15" fill="rgb(242,107,0)"/><text x="75.1653%" y="79.50">co..</text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (8 samples, 2.71%)</title><rect x="74.9153%" y="53" width="2.7119%" height="15" fill="rgb(251,28,31)"/><text x="75.1653%" y="63.50">co..</text></g><g><title>core::core_arch::simd::i8x16::new (8 samples, 2.71%)</title><rect x="74.9153%" y="37" width="2.7119%" height="15" fill="rgb(233,223,10)"/><text x="75.1653%" y="47.50">co..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (158 samples, 53.56%)</title><rect x="25.7627%" y="389" width="53.5593%" height="15" fill="rgb(215,21,27)"/><text x="26.0127%" y="399.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (158 samples, 53.56%)</title><rect x="25.7627%" y="373" width="53.5593%" height="15" fill="rgb(232,23,21)"/><text x="26.0127%" y="383.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::{{closure}} (158 samples, 53.56%)</title><rect x="25.7627%" y="357" width="53.5593%" height="15" fill="rgb(244,5,23)"/><text x="26.0127%" y="367.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iter..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (147 samples, 49.83%)</title><rect x="29.4915%" y="341" width="49.8305%" height="15" fill="rgb(226,81,46)"/><text x="29.7415%" y="351.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::f..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (121 samples, 41.02%)</title><rect x="38.3051%" y="325" width="41.0169%" height="15" fill="rgb(247,70,30)"/><text x="38.5551%" y="335.50">core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (121 samples, 41.02%)</title><rect x="38.3051%" y="309" width="41.0169%" height="15" fill="rgb(212,68,19)"/><text x="38.5551%" y="319.50">core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for..</text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (5 samples, 1.69%)</title><rect x="77.6271%" y="293" width="1.6949%" height="15" fill="rgb(240,187,13)"/><text x="77.8771%" y="303.50"></text></g><g><title>core::cmp::min (5 samples, 1.69%)</title><rect x="81.3559%" y="373" width="1.6949%" height="15" fill="rgb(223,113,26)"/><text x="81.6059%" y="383.50"></text></g><g><title>core::cmp::Ord::min (5 samples, 1.69%)</title><rect x="81.3559%" y="357" width="1.6949%" height="15" fill="rgb(206,192,2)"/><text x="81.6059%" y="367.50"></text></g><g><title>core::cmp::min_by (5 samples, 1.69%)</title><rect x="81.3559%" y="341" width="1.6949%" height="15" fill="rgb(241,108,4)"/><text x="81.6059%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (193 samples, 65.42%)</title><rect x="20.0000%" y="533" width="65.4237%" height="15" fill="rgb(247,173,49)"/><text x="20.2500%" y="543.50">&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (188 samples, 63.73%)</title><rect x="21.6949%" y="517" width="63.7288%" height="15" fill="rgb(224,114,35)"/><text x="21.9449%" y="527.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (184 samples, 62.37%)</title><rect x="23.0508%" y="501" width="62.3729%" height="15" fill="rgb(245,159,27)"/><text x="23.3008%" y="511.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::fold (184 samples, 62.37%)</title><rect x="23.0508%" y="485" width="62.3729%" height="15" fill="rgb(245,172,44)"/><text x="23.3008%" y="495.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::fold</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (184 samples, 62.37%)</title><rect x="23.0508%" y="469" width="62.3729%" height="15" fill="rgb(236,23,11)"/><text x="23.3008%" y="479.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold (184 samples, 62.37%)</title><rect x="23.0508%" y="453" width="62.3729%" height="15" fill="rgb(205,117,38)"/><text x="23.3008%" y="463.50">core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::try_fold (184 samples, 62.37%)</title><rect x="23.0508%" y="437" width="62.3729%" height="15" fill="rgb(237,72,25)"/><text x="23.3008%" y="447.50">core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::fold::ok::{{closure}} (176 samples, 59.66%)</title><rect x="25.7627%" y="421" width="59.6610%" height="15" fill="rgb(244,70,9)"/><text x="26.0127%" y="431.50">core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusiv..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (176 samples, 59.66%)</title><rect x="25.7627%" y="405" width="59.6610%" height="15" fill="rgb(217,125,39)"/><text x="26.0127%" y="415.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>day18::Grid::gen_next_state::{{closure}} (18 samples, 6.10%)</title><rect x="79.3220%" y="389" width="6.1017%" height="15" fill="rgb(235,36,10)"/><text x="79.5720%" y="399.50">day18::G..</text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (7 samples, 2.37%)</title><rect x="83.0508%" y="373" width="2.3729%" height="15" fill="rgb(251,123,47)"/><text x="83.3008%" y="383.50">co..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (205 samples, 69.49%)</title><rect x="16.2712%" y="549" width="69.4915%" height="15" fill="rgb(221,13,13)"/><text x="16.5212%" y="559.50">&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.34%)</title><rect x="85.4237%" y="533" width="0.3390%" height="15" fill="rgb(238,131,9)"/><text x="85.6737%" y="543.50"></text></g><g><title>&lt;core::option::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.34%)</title><rect x="85.4237%" y="517" width="0.3390%" height="15" fill="rgb(211,50,8)"/><text x="85.6737%" y="527.50"></text></g><g><title>&lt;core::option::Item&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.34%)</title><rect x="85.4237%" y="501" width="0.3390%" height="15" fill="rgb(245,182,24)"/><text x="85.6737%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.34%)</title><rect x="85.4237%" y="485" width="0.3390%" height="15" fill="rgb(242,14,37)"/><text x="85.6737%" y="495.50"></text></g><g><title>core::mem::take (1 samples, 0.34%)</title><rect x="85.4237%" y="469" width="0.3390%" height="15" fill="rgb(246,228,12)"/><text x="85.6737%" y="479.50"></text></g><g><title>core::mem::replace (1 samples, 0.34%)</title><rect x="85.4237%" y="453" width="0.3390%" height="15" fill="rgb(213,55,15)"/><text x="85.6737%" y="463.50"></text></g><g><title>core::mem::swap (1 samples, 0.34%)</title><rect x="85.4237%" y="437" width="0.3390%" height="15" fill="rgb(209,9,3)"/><text x="85.6737%" y="447.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.34%)</title><rect x="85.4237%" y="421" width="0.3390%" height="15" fill="rgb(230,59,30)"/><text x="85.6737%" y="431.50"></text></g><g><title>core::ptr::swap_nonoverlapping (1 samples, 0.34%)</title><rect x="85.4237%" y="405" width="0.3390%" height="15" fill="rgb(209,121,21)"/><text x="85.6737%" y="415.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (1 samples, 0.34%)</title><rect x="85.4237%" y="389" width="0.3390%" height="15" fill="rgb(220,109,13)"/><text x="85.6737%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.34%)</title><rect x="85.4237%" y="373" width="0.3390%" height="15" fill="rgb(232,18,1)"/><text x="85.6737%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (210 samples, 71.19%)</title><rect x="15.9322%" y="597" width="71.1864%" height="15" fill="rgb(215,41,42)"/><text x="16.1822%" y="607.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (210 samples, 71.19%)</title><rect x="15.9322%" y="581" width="71.1864%" height="15" fill="rgb(224,123,36)"/><text x="16.1822%" y="591.50">&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold (209 samples, 70.85%)</title><rect x="16.2712%" y="565" width="70.8475%" height="15" fill="rgb(240,125,3)"/><text x="16.5212%" y="575.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::chain (4 samples, 1.36%)</title><rect x="85.7627%" y="549" width="1.3559%" height="15" fill="rgb(205,98,50)"/><text x="86.0127%" y="559.50"></text></g><g><title>core::iter::adapters::chain::Chain&lt;A,B&gt;::new (4 samples, 1.36%)</title><rect x="85.7627%" y="533" width="1.3559%" height="15" fill="rgb(205,185,37)"/><text x="86.0127%" y="543.50"></text></g><g><title>core::cmp::min (2 samples, 0.68%)</title><rect x="87.1186%" y="597" width="0.6780%" height="15" fill="rgb(238,207,15)"/><text x="87.3686%" y="607.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.68%)</title><rect x="87.1186%" y="581" width="0.6780%" height="15" fill="rgb(213,199,42)"/><text x="87.3686%" y="591.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.68%)</title><rect x="87.1186%" y="565" width="0.6780%" height="15" fill="rgb(235,201,11)"/><text x="87.3686%" y="575.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next (2 samples, 0.68%)</title><rect x="87.7966%" y="597" width="0.6780%" height="15" fill="rgb(207,46,11)"/><text x="88.0466%" y="607.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (2 samples, 0.68%)</title><rect x="87.7966%" y="581" width="0.6780%" height="15" fill="rgb(241,35,35)"/><text x="88.0466%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (3 samples, 1.02%)</title><rect x="88.4746%" y="597" width="1.0169%" height="15" fill="rgb(243,32,47)"/><text x="88.7246%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.34%)</title><rect x="89.8305%" y="517" width="0.3390%" height="15" fill="rgb(247,202,23)"/><text x="90.0805%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (1 samples, 0.34%)</title><rect x="89.8305%" y="501" width="0.3390%" height="15" fill="rgb(219,102,11)"/><text x="90.0805%" y="511.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (1 samples, 0.34%)</title><rect x="90.5085%" y="485" width="0.3390%" height="15" fill="rgb(243,110,44)"/><text x="90.7585%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 1.02%)</title><rect x="90.1695%" y="501" width="1.0169%" height="15" fill="rgb(222,74,54)"/><text x="90.4195%" y="511.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.34%)</title><rect x="90.8475%" y="485" width="0.3390%" height="15" fill="rgb(216,99,12)"/><text x="91.0975%" y="495.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.34%)</title><rect x="90.8475%" y="469" width="0.3390%" height="15" fill="rgb(226,22,26)"/><text x="91.0975%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.34%)</title><rect x="90.8475%" y="453" width="0.3390%" height="15" fill="rgb(217,163,10)"/><text x="91.0975%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::{{closure}} (1 samples, 0.34%)</title><rect x="91.1864%" y="501" width="0.3390%" height="15" fill="rgb(213,25,53)"/><text x="91.4364%" y="511.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B)&gt;::eq (1 samples, 0.34%)</title><rect x="91.1864%" y="485" width="0.3390%" height="15" fill="rgb(252,105,26)"/><text x="91.4364%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.68%)</title><rect x="91.5254%" y="469" width="0.6780%" height="15" fill="rgb(220,39,43)"/><text x="91.7754%" y="479.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (11 samples, 3.73%)</title><rect x="89.4915%" y="597" width="3.7288%" height="15" fill="rgb(229,68,48)"/><text x="89.7415%" y="607.50">std:..</text></g><g><title>hashbrown::set::HashSet&lt;T,S&gt;::contains (11 samples, 3.73%)</title><rect x="89.4915%" y="581" width="3.7288%" height="15" fill="rgb(252,8,32)"/><text x="89.7415%" y="591.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (10 samples, 3.39%)</title><rect x="89.8305%" y="565" width="3.3898%" height="15" fill="rgb(223,20,43)"/><text x="90.0805%" y="575.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (10 samples, 3.39%)</title><rect x="89.8305%" y="549" width="3.3898%" height="15" fill="rgb(229,81,49)"/><text x="90.0805%" y="559.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (10 samples, 3.39%)</title><rect x="89.8305%" y="533" width="3.3898%" height="15" fill="rgb(236,28,36)"/><text x="90.0805%" y="543.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (9 samples, 3.05%)</title><rect x="90.1695%" y="517" width="3.0508%" height="15" fill="rgb(249,185,26)"/><text x="90.4195%" y="527.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (5 samples, 1.69%)</title><rect x="91.5254%" y="501" width="1.6949%" height="15" fill="rgb(249,174,33)"/><text x="91.7754%" y="511.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (5 samples, 1.69%)</title><rect x="91.5254%" y="485" width="1.6949%" height="15" fill="rgb(233,201,37)"/><text x="91.7754%" y="495.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 1.02%)</title><rect x="92.2034%" y="469" width="1.0169%" height="15" fill="rgb(221,78,26)"/><text x="92.4534%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (3 samples, 1.02%)</title><rect x="92.2034%" y="453" width="1.0169%" height="15" fill="rgb(250,127,30)"/><text x="92.4534%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (3 samples, 1.02%)</title><rect x="92.2034%" y="437" width="1.0169%" height="15" fill="rgb(230,49,44)"/><text x="92.4534%" y="447.50"></text></g><g><title>core::core_arch::simd::i8x16::new (3 samples, 1.02%)</title><rect x="92.2034%" y="421" width="1.0169%" height="15" fill="rgb(229,67,23)"/><text x="92.4534%" y="431.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.34%)</title><rect x="93.2203%" y="549" width="0.3390%" height="15" fill="rgb(249,83,47)"/><text x="93.4703%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (1 samples, 0.34%)</title><rect x="93.2203%" y="533" width="0.3390%" height="15" fill="rgb(215,43,3)"/><text x="93.4703%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.34%)</title><rect x="93.2203%" y="517" width="0.3390%" height="15" fill="rgb(238,154,13)"/><text x="93.4703%" y="527.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (1 samples, 0.34%)</title><rect x="93.2203%" y="501" width="0.3390%" height="15" fill="rgb(219,56,2)"/><text x="93.4703%" y="511.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (1 samples, 0.34%)</title><rect x="93.2203%" y="485" width="0.3390%" height="15" fill="rgb(233,0,4)"/><text x="93.4703%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (1 samples, 0.34%)</title><rect x="93.2203%" y="469" width="0.3390%" height="15" fill="rgb(235,30,7)"/><text x="93.4703%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.34%)</title><rect x="93.5593%" y="517" width="0.3390%" height="15" fill="rgb(250,79,13)"/><text x="93.8093%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.68%)</title><rect x="93.5593%" y="533" width="0.6780%" height="15" fill="rgb(211,146,34)"/><text x="93.8093%" y="543.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (1 samples, 0.34%)</title><rect x="93.8983%" y="517" width="0.3390%" height="15" fill="rgb(228,22,38)"/><text x="94.1483%" y="527.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.34%)</title><rect x="94.2373%" y="501" width="0.3390%" height="15" fill="rgb(235,168,5)"/><text x="94.4873%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (4 samples, 1.36%)</title><rect x="93.5593%" y="549" width="1.3559%" height="15" fill="rgb(221,155,16)"/><text x="93.8093%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (2 samples, 0.68%)</title><rect x="94.2373%" y="533" width="0.6780%" height="15" fill="rgb(215,215,53)"/><text x="94.4873%" y="543.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (2 samples, 0.68%)</title><rect x="94.2373%" y="517" width="0.6780%" height="15" fill="rgb(223,4,10)"/><text x="94.4873%" y="527.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.34%)</title><rect x="94.5763%" y="501" width="0.3390%" height="15" fill="rgb(234,103,6)"/><text x="94.8263%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.34%)</title><rect x="94.5763%" y="485" width="0.3390%" height="15" fill="rgb(227,97,0)"/><text x="94.8263%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.34%)</title><rect x="94.5763%" y="469" width="0.3390%" height="15" fill="rgb(234,150,53)"/><text x="94.8263%" y="479.50"></text></g><g><title>std::panic::catch_unwind (239 samples, 81.02%)</title><rect x="15.2542%" y="757" width="81.0169%" height="15" fill="rgb(228,201,54)"/><text x="15.5042%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (239 samples, 81.02%)</title><rect x="15.2542%" y="741" width="81.0169%" height="15" fill="rgb(222,22,37)"/><text x="15.5042%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (239 samples, 81.02%)</title><rect x="15.2542%" y="725" width="81.0169%" height="15" fill="rgb(237,53,32)"/><text x="15.5042%" y="735.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (239 samples, 81.02%)</title><rect x="15.2542%" y="709" width="81.0169%" height="15" fill="rgb(233,25,53)"/><text x="15.5042%" y="719.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (239 samples, 81.02%)</title><rect x="15.2542%" y="693" width="81.0169%" height="15" fill="rgb(210,40,34)"/><text x="15.5042%" y="703.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (239 samples, 81.02%)</title><rect x="15.2542%" y="677" width="81.0169%" height="15" fill="rgb(241,220,44)"/><text x="15.5042%" y="687.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (239 samples, 81.02%)</title><rect x="15.2542%" y="661" width="81.0169%" height="15" fill="rgb(235,28,35)"/><text x="15.5042%" y="671.50">core::ops::function::FnOnce::call_once</text></g><g><title>day18::main (239 samples, 81.02%)</title><rect x="15.2542%" y="645" width="81.0169%" height="15" fill="rgb(210,56,17)"/><text x="15.5042%" y="655.50">day18::main</text></g><g><title>day18::game_of_life (239 samples, 81.02%)</title><rect x="15.2542%" y="629" width="81.0169%" height="15" fill="rgb(224,130,29)"/><text x="15.5042%" y="639.50">day18::game_of_life</text></g><g><title>day18::Grid::gen_next_state (238 samples, 80.68%)</title><rect x="15.5932%" y="613" width="80.6780%" height="15" fill="rgb(235,212,8)"/><text x="15.8432%" y="623.50">day18::Grid::gen_next_state</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (9 samples, 3.05%)</title><rect x="93.2203%" y="597" width="3.0508%" height="15" fill="rgb(223,33,50)"/><text x="93.4703%" y="607.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S&gt;::insert (9 samples, 3.05%)</title><rect x="93.2203%" y="581" width="3.0508%" height="15" fill="rgb(219,149,13)"/><text x="93.4703%" y="591.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (9 samples, 3.05%)</title><rect x="93.2203%" y="565" width="3.0508%" height="15" fill="rgb(250,156,29)"/><text x="93.4703%" y="575.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (4 samples, 1.36%)</title><rect x="94.9153%" y="549" width="1.3559%" height="15" fill="rgb(216,193,19)"/><text x="95.1653%" y="559.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (4 samples, 1.36%)</title><rect x="94.9153%" y="533" width="1.3559%" height="15" fill="rgb(216,135,14)"/><text x="95.1653%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4 samples, 1.36%)</title><rect x="94.9153%" y="517" width="1.3559%" height="15" fill="rgb(241,47,5)"/><text x="95.1653%" y="527.50"></text></g><g><title>core::ptr::write (4 samples, 1.36%)</title><rect x="94.9153%" y="501" width="1.3559%" height="15" fill="rgb(233,42,35)"/><text x="95.1653%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.68%)</title><rect x="95.5932%" y="485" width="0.6780%" height="15" fill="rgb(231,13,6)"/><text x="95.8432%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.68%)</title><rect x="95.5932%" y="469" width="0.6780%" height="15" fill="rgb(207,181,40)"/><text x="95.8432%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.68%)</title><rect x="95.5932%" y="453" width="0.6780%" height="15" fill="rgb(254,173,49)"/><text x="95.8432%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.68%)</title><rect x="95.5932%" y="437" width="0.6780%" height="15" fill="rgb(221,1,38)"/><text x="95.8432%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="95.9322%" y="421" width="0.3390%" height="15" fill="rgb(206,124,46)"/><text x="96.1822%" y="431.50"></text></g><g><title>__libc_start_main (240 samples, 81.36%)</title><rect x="15.2542%" y="805" width="81.3559%" height="15" fill="rgb(249,21,11)"/><text x="15.5042%" y="815.50">__libc_start_main</text></g><g><title>main (240 samples, 81.36%)</title><rect x="15.2542%" y="789" width="81.3559%" height="15" fill="rgb(222,201,40)"/><text x="15.5042%" y="799.50">main</text></g><g><title>std::rt::lang_start_internal (240 samples, 81.36%)</title><rect x="15.2542%" y="773" width="81.3559%" height="15" fill="rgb(235,61,29)"/><text x="15.5042%" y="783.50">std::rt::lang_start_internal</text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.34%)</title><rect x="96.2712%" y="757" width="0.3390%" height="15" fill="rgb(219,207,3)"/><text x="96.5212%" y="767.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.34%)</title><rect x="96.2712%" y="741" width="0.3390%" height="15" fill="rgb(222,56,46)"/><text x="96.5212%" y="751.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.34%)</title><rect x="96.2712%" y="725" width="0.3390%" height="15" fill="rgb(239,76,54)"/><text x="96.5212%" y="735.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.34%)</title><rect x="96.2712%" y="709" width="0.3390%" height="15" fill="rgb(231,124,27)"/><text x="96.5212%" y="719.50"></text></g><g><title>_IO_new_fopen (1 samples, 0.34%)</title><rect x="96.2712%" y="693" width="0.3390%" height="15" fill="rgb(249,195,6)"/><text x="96.5212%" y="703.50"></text></g><g><title>__fopen_internal (1 samples, 0.34%)</title><rect x="96.2712%" y="677" width="0.3390%" height="15" fill="rgb(237,174,47)"/><text x="96.5212%" y="687.50"></text></g><g><title>_IO_no_init (1 samples, 0.34%)</title><rect x="96.2712%" y="661" width="0.3390%" height="15" fill="rgb(206,201,31)"/><text x="96.5212%" y="671.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.34%)</title><rect x="96.6102%" y="741" width="0.3390%" height="15" fill="rgb(231,57,52)"/><text x="96.8602%" y="751.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.34%)</title><rect x="96.6102%" y="725" width="0.3390%" height="15" fill="rgb(248,177,22)"/><text x="96.8602%" y="735.50"></text></g><g><title>openaux (1 samples, 0.34%)</title><rect x="96.6102%" y="709" width="0.3390%" height="15" fill="rgb(215,211,37)"/><text x="96.8602%" y="719.50"></text></g><g><title>_dl_map_object (1 samples, 0.34%)</title><rect x="96.6102%" y="693" width="0.3390%" height="15" fill="rgb(241,128,51)"/><text x="96.8602%" y="703.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.34%)</title><rect x="96.6102%" y="677" width="0.3390%" height="15" fill="rgb(227,165,31)"/><text x="96.8602%" y="687.50"></text></g><g><title>_dl_map_segments (1 samples, 0.34%)</title><rect x="96.6102%" y="661" width="0.3390%" height="15" fill="rgb(228,167,24)"/><text x="96.8602%" y="671.50"></text></g><g><title>__mmap64 (1 samples, 0.34%)</title><rect x="96.6102%" y="645" width="0.3390%" height="15" fill="rgb(228,143,12)"/><text x="96.8602%" y="655.50"></text></g><g><title>__mmap64 (1 samples, 0.34%)</title><rect x="96.6102%" y="629" width="0.3390%" height="15" fill="rgb(249,149,8)"/><text x="96.8602%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="96.6102%" y="613" width="0.3390%" height="15" fill="rgb(243,35,44)"/><text x="96.8602%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="96.6102%" y="597" width="0.3390%" height="15" fill="rgb(246,89,9)"/><text x="96.8602%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="96.6102%" y="581" width="0.3390%" height="15" fill="rgb(233,213,13)"/><text x="96.8602%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="96.6102%" y="565" width="0.3390%" height="15" fill="rgb(233,141,41)"/><text x="96.8602%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="96.6102%" y="549" width="0.3390%" height="15" fill="rgb(239,167,4)"/><text x="96.8602%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="96.6102%" y="533" width="0.3390%" height="15" fill="rgb(209,217,16)"/><text x="96.8602%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="96.6102%" y="517" width="0.3390%" height="15" fill="rgb(219,88,35)"/><text x="96.8602%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="96.6102%" y="501" width="0.3390%" height="15" fill="rgb(220,193,23)"/><text x="96.8602%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="96.6102%" y="485" width="0.3390%" height="15" fill="rgb(230,90,52)"/><text x="96.8602%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="96.6102%" y="469" width="0.3390%" height="15" fill="rgb(252,106,19)"/><text x="96.8602%" y="479.50"></text></g><g><title>day18 (287 samples, 97.29%)</title><rect x="0.0000%" y="837" width="97.2881%" height="15" fill="rgb(206,74,20)"/><text x="0.2500%" y="847.50">day18</text></g><g><title>_start (242 samples, 82.03%)</title><rect x="15.2542%" y="821" width="82.0339%" height="15" fill="rgb(230,138,44)"/><text x="15.5042%" y="831.50">_start</text></g><g><title>_dl_start (2 samples, 0.68%)</title><rect x="96.6102%" y="805" width="0.6780%" height="15" fill="rgb(235,182,43)"/><text x="96.8602%" y="815.50"></text></g><g><title>_dl_start_final (2 samples, 0.68%)</title><rect x="96.6102%" y="789" width="0.6780%" height="15" fill="rgb(242,16,51)"/><text x="96.8602%" y="799.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.68%)</title><rect x="96.6102%" y="773" width="0.6780%" height="15" fill="rgb(248,9,4)"/><text x="96.8602%" y="783.50"></text></g><g><title>dl_main (2 samples, 0.68%)</title><rect x="96.6102%" y="757" width="0.6780%" height="15" fill="rgb(210,31,22)"/><text x="96.8602%" y="767.50"></text></g><g><title>init_tls (1 samples, 0.34%)</title><rect x="96.9492%" y="741" width="0.3390%" height="15" fill="rgb(239,54,39)"/><text x="97.1992%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="96.9492%" y="725" width="0.3390%" height="15" fill="rgb(230,99,41)"/><text x="97.1992%" y="735.50"></text></g><g><title>all (295 samples, 100%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(253,106,12)"/><text x="0.2500%" y="863.50"></text></g><g><title>perf (8 samples, 2.71%)</title><rect x="97.2881%" y="837" width="2.7119%" height="15" fill="rgb(213,46,41)"/><text x="97.5381%" y="847.50">pe..</text></g><g><title>[unknown] (8 samples, 2.71%)</title><rect x="97.2881%" y="821" width="2.7119%" height="15" fill="rgb(215,133,35)"/><text x="97.5381%" y="831.50">[u..</text></g><g><title>[unknown] (8 samples, 2.71%)</title><rect x="97.2881%" y="805" width="2.7119%" height="15" fill="rgb(213,28,5)"/><text x="97.5381%" y="815.50">[u..</text></g><g><title>[unknown] (8 samples, 2.71%)</title><rect x="97.2881%" y="789" width="2.7119%" height="15" fill="rgb(215,77,49)"/><text x="97.5381%" y="799.50">[u..</text></g><g><title>[unknown] (8 samples, 2.71%)</title><rect x="97.2881%" y="773" width="2.7119%" height="15" fill="rgb(248,100,22)"/><text x="97.5381%" y="783.50">[u..</text></g><g><title>[unknown] (8 samples, 2.71%)</title><rect x="97.2881%" y="757" width="2.7119%" height="15" fill="rgb(208,67,9)"/><text x="97.5381%" y="767.50">[u..</text></g><g><title>[unknown] (8 samples, 2.71%)</title><rect x="97.2881%" y="741" width="2.7119%" height="15" fill="rgb(219,133,21)"/><text x="97.5381%" y="751.50">[u..</text></g><g><title>[unknown] (8 samples, 2.71%)</title><rect x="97.2881%" y="725" width="2.7119%" height="15" fill="rgb(246,46,29)"/><text x="97.5381%" y="735.50">[u..</text></g><g><title>[unknown] (8 samples, 2.71%)</title><rect x="97.2881%" y="709" width="2.7119%" height="15" fill="rgb(246,185,52)"/><text x="97.5381%" y="719.50">[u..</text></g><g><title>[unknown] (8 samples, 2.71%)</title><rect x="97.2881%" y="693" width="2.7119%" height="15" fill="rgb(252,136,11)"/><text x="97.5381%" y="703.50">[u..</text></g><g><title>[unknown] (7 samples, 2.37%)</title><rect x="97.6271%" y="677" width="2.3729%" height="15" fill="rgb(219,138,53)"/><text x="97.8771%" y="687.50">[u..</text></g><g><title>[unknown] (7 samples, 2.37%)</title><rect x="97.6271%" y="661" width="2.3729%" height="15" fill="rgb(211,51,23)"/><text x="97.8771%" y="671.50">[u..</text></g><g><title>[unknown] (7 samples, 2.37%)</title><rect x="97.6271%" y="645" width="2.3729%" height="15" fill="rgb(247,221,28)"/><text x="97.8771%" y="655.50">[u..</text></g><g><title>[unknown] (7 samples, 2.37%)</title><rect x="97.6271%" y="629" width="2.3729%" height="15" fill="rgb(251,222,45)"/><text x="97.8771%" y="639.50">[u..</text></g></svg></svg>